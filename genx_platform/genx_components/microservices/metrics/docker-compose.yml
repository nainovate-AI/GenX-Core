# genx_platform/genx_components/microservices/metrics/docker-compose.yml

services:
  # Metrics Service
  metrics-service:
    build:
      context: ../../../  # genx_platform directory
      dockerfile: genx_components/microservices/metrics/Dockerfile
      args:
        - VERSION=${VERSION:-1.0.0}
    image: genx/metrics-service:${VERSION:-latest}
    container_name: genx-metrics-service
    hostname: metrics-service
    ports:
      - "50056:50056"  # gRPC
      - "9091:9090"    # Prometheus metrics
    environment:
      # Service Configuration
      - SERVICE_NAME=metrics-service
      - SERVICE_VERSION=${VERSION:-1.0.0}
      - SERVICE_PORT=50056
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      
      # gRPC Configuration
      - GRPC_MAX_WORKERS=${GRPC_MAX_WORKERS:-8}
      - GRPC_MAX_MESSAGE_LENGTH=${GRPC_MAX_MESSAGE_LENGTH:-104857600}
      - GRPC_TLS_ENABLED=${GRPC_TLS_ENABLED:-true}
      - GRPC_TLS_CERT_PATH=/certs/server.crt
      - GRPC_TLS_KEY_PATH=/certs/server.key
      - GRPC_TLS_CA_PATH=/certs/ca.crt
      
      # Telemetry Configuration
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
      - TELEMETRY_ENDPOINT=${TELEMETRY_ENDPOINT:-http://otel-collector:4317}
      - METRICS_PORT=9090
      
      # Registry Configuration
      - REGISTRY_ENABLED=${REGISTRY_ENABLED:-true}
      - REGISTRY_ENDPOINT=${REGISTRY_ENDPOINT:-http://consul:8500}
      
      # Service Specific Configuration
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-30}
      - BACKGROUND_COLLECTION_INTERVAL=${BACKGROUND_COLLECTION_INTERVAL:-30}
      - MODEL_STORAGE_PATH=/models
      
      # Security
      - ENABLE_AUTH=${ENABLE_AUTH:-true}
      - AUTH_TOKEN=${METRICS_AUTH_TOKEN}
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-1000}
      
    volumes:
      # TLS Certificates
      - ./certs:/certs:ro
      # Model storage
      - model-data:/models:ro
      # Logs
      - ./logs:/logs:rw
      # Host system access for metrics collection (read-only)
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Disk metrics
      - /:/host/root:ro
      - /dev/disk:/dev/disk:ro
      
    networks:
      - genx-network
      
    depends_on:
      - otel-collector
      - consul
      
    restart: unless-stopped
    
    # Security Configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SYS_PTRACE      # For process metrics
      - DAC_READ_SEARCH # For filesystem access
      - NET_RAW         # For network metrics
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=metrics,environment=${ENVIRONMENT:-production}"
    
    # Health Check
    healthcheck:
      test: ["CMD", "python", "-m", "grpc_health.v1.health_check", "--address=localhost:50056"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: genx-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel-collector/config.yaml:/etc/otel-collector-config.yaml:ro
      - ./certs:/certs:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
      - "13133:13133" # Health check
      - "55679:55679" # zPages
    networks:
      - genx-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Service Discovery - Consul
  consul:
    image: hashicorp/consul:latest
    container_name: genx-consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    volumes:
      - consul-data:/consul/data
    networks:
      - genx-network
    restart: unless-stopped
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Load Balancer - Envoy
  envoy:
    image: envoyproxy/envoy:v1.28-latest
    container_name: genx-envoy
    command: ["-c", "/etc/envoy/envoy.yaml", "--service-cluster", "metrics-lb"]
    volumes:
      - ./monitoring/envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./certs:/certs:ro
    ports:
      - "50050:50050"  # Load balanced gRPC endpoint
      - "9901:9901"    # Envoy admin
    networks:
      - genx-network
    depends_on:
      - metrics-service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  model-data:
    driver: local
  consul-data:
    driver: local

networks:
  genx-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16  # Changed from 172.20.0.0/16 to avoid conflicts
    driver_opts:
      com.docker.network.bridge.name: genx_bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"