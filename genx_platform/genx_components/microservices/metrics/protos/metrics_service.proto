// protos/metrics_service.proto
syntax = "proto3";

package genx.metrics.v1;

option go_package = "github.com/genx/platform/api/metrics/v1;metricsv1";
option java_multiple_files = true;
option java_package = "com.genx.platform.api.metrics.v1";

import "common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Metrics service for system resource monitoring
service MetricsService {
  // Get current system metrics
  rpc GetSystemMetrics(GetSystemMetricsRequest) returns (GetSystemMetricsResponse);
  
  // Stream real-time metrics updates
  rpc StreamSystemMetrics(StreamSystemMetricsRequest) returns (stream SystemMetricsUpdate);
  
  // Get historical metrics
  rpc GetMetricsHistory(GetMetricsHistoryRequest) returns (GetMetricsHistoryResponse);
  
  // Force refresh metrics collection
  rpc RefreshMetrics(RefreshMetricsRequest) returns (RefreshMetricsResponse);
  
  // Get resource summary for dashboard
  rpc GetResourceSummary(GetResourceSummaryRequest) returns (GetResourceSummaryResponse);
}

// Request for getting system metrics
message GetSystemMetricsRequest {
  // Standard request metadata
  genx.common.v1.RequestMetadata metadata = 1;
  
  // Which metrics to include
  repeated MetricType metric_types = 2;
  
  // Force fresh collection instead of cached
  bool force_refresh = 3;
}

// Response with system metrics
message GetSystemMetricsResponse {
  // Standard response metadata
  genx.common.v1.ResponseMetadata metadata = 1;
  
  // Collected metrics
  SystemMetrics metrics = 2;
  
  // Whether data is from cache or fresh
  string source = 3; // "cache" or "fresh"
  
  // Error details if any
  optional genx.common.v1.ErrorDetail error = 4;
  
  // Resource alerts if any thresholds exceeded
  repeated ResourceAlert alerts = 5;
}

// Request for streaming metrics
message StreamSystemMetricsRequest {
  // Standard request metadata
  genx.common.v1.RequestMetadata metadata = 1;
  
  // Update interval in seconds
  int32 interval_seconds = 2;
  
  // Which metrics to include
  repeated MetricType metric_types = 3;
  
  // Maximum duration in seconds (0 = unlimited)
  int32 max_duration_seconds = 4;
  
  // Send only changed values
  bool include_deltas_only = 5;
  
  // Minimum change percentage to trigger update
  double change_threshold_percent = 6;
  
  // Include resource alerts
  bool include_alerts = 7;
}

// Streamed metrics update
message SystemMetricsUpdate {
  // Update type
  UpdateType type = 1;
  
  // Metrics data
  SystemMetrics metrics = 2;
  
  // Update timestamp
  google.protobuf.Timestamp timestamp = 3;
  
  // Resource alerts
  repeated ResourceAlert alerts = 4;
  
  // Error if any
  optional genx.common.v1.ErrorDetail error = 5;
  
  enum UpdateType {
    UPDATE_TYPE_UNSPECIFIED = 0;
    UPDATE_TYPE_INITIAL = 1;
    UPDATE_TYPE_PERIODIC = 2;
    UPDATE_TYPE_REFRESH = 3;
    UPDATE_TYPE_ALERT = 4;
  }
}

// Additional message definitions...
message GetMetricsHistoryRequest {
  genx.common.v1.RequestMetadata metadata = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  repeated MetricType metric_types = 4;
  int32 resolution_seconds = 5;
}

message GetMetricsHistoryResponse {
  genx.common.v1.ResponseMetadata metadata = 1;
  repeated MetricsDataPoint data_points = 2;
  MetricsHistoryMetadata history_metadata = 3;
  optional genx.common.v1.ErrorDetail error = 4;
}

message RefreshMetricsRequest {
  genx.common.v1.RequestMetadata metadata = 1;
}

message RefreshMetricsResponse {
  genx.common.v1.ResponseMetadata metadata = 1;
  bool success = 2;
  SystemMetrics metrics = 3;
  optional genx.common.v1.ErrorDetail error = 4;
}

message GetResourceSummaryRequest {
  genx.common.v1.RequestMetadata metadata = 1;
  bool include_trend = 2;
  int32 trend_duration_seconds = 3;
}

message GetResourceSummaryResponse {
  genx.common.v1.ResponseMetadata metadata = 1;
  ResourceStatus cpu_status = 2;
  ResourceStatus memory_status = 3;
  ResourceStatus gpu_status = 4;
  ResourceStatus disk_status = 5;
  ResourceStatus network_status = 6;
  SystemHealth overall_health = 7;
  repeated ResourceAlert active_alerts = 8;
  optional genx.common.v1.ErrorDetail error = 9;
}

// Types of metrics available
enum MetricType {
  METRIC_TYPE_UNSPECIFIED = 0;
  METRIC_TYPE_CPU = 1;
  METRIC_TYPE_MEMORY = 2;
  METRIC_TYPE_GPU = 3;
  METRIC_TYPE_DISK = 4;
  METRIC_TYPE_NETWORK = 5;
  METRIC_TYPE_ALL = 6;
}

// Complete system metrics
message SystemMetrics {
  CpuMetrics cpu = 1;
  MemoryMetrics memory = 2;
  repeated GpuMetrics gpu = 3;
  DiskMetrics disk = 4;
  NetworkMetrics network = 5;
  string node_id = 6;
  string service_name = 7;
  string service_version = 8;
  map<string, string> labels = 9;
  google.protobuf.Timestamp collected_at = 10;
}

// CPU metrics
message CpuMetrics {
  double usage_percent = 1;
  repeated double per_core_percent = 2;
  CpuFrequency frequency = 3;
  LoadAverage load_average = 4;
  int32 count = 5;
  int32 count_logical = 6;
  int32 process_count = 7;
  int32 thread_count = 8;
  int64 context_switches_per_sec = 9;
  
  message CpuFrequency {
    double current_mhz = 1;
    double min_mhz = 2;
    double max_mhz = 3;
  }
  
  message LoadAverage {
    double one_minute = 1;
    double five_minutes = 2;
    double fifteen_minutes = 3;
  }
}

// Memory metrics
message MemoryMetrics {
  int64 total_bytes = 1;
  int64 available_bytes = 2;
  int64 used_bytes = 3;
  int64 free_bytes = 4;
  double percent = 5;
  SwapMemory swap = 6;
  
  message SwapMemory {
    int64 total_bytes = 1;
    int64 used_bytes = 2;
    int64 free_bytes = 3;
    double percent = 4;
  }
}

// GPU metrics
message GpuMetrics {
  int32 id = 1;
  string name = 2;
  double load_percent = 3;
  GpuMemory memory = 4;
  double temperature_celsius = 5;
  string uuid = 6;
  string driver_version = 7;
  
  message GpuMemory {
    int64 total_bytes = 1;
    int64 used_bytes = 2;
    int64 free_bytes = 3;
    double percent = 4;
  }
}

// Disk metrics
message DiskMetrics {
  DiskUsage usage = 1;
  
  message DiskUsage {
    int64 total_bytes = 1;
    int64 used_bytes = 2;
    int64 free_bytes = 3;
    double percent = 4;
  }
}

// Network metrics
message NetworkMetrics {
  NetworkIo io = 1;
  
  message NetworkIo {
    int64 bytes_sent = 1;
    int64 bytes_received = 2;
    int64 packets_sent = 3;
    int64 packets_received = 4;
  }
}

// Resource alert
message ResourceAlert {
  string id = 1;
  string resource_type = 2;
  AlertSeverity severity = 3;
  string message = 4;
  double current_value = 5;
  double threshold = 6;
  google.protobuf.Timestamp triggered_at = 7;
  map<string, string> context = 8;
  
  enum AlertSeverity {
    ALERT_SEVERITY_UNSPECIFIED = 0;
    ALERT_SEVERITY_INFO = 1;
    ALERT_SEVERITY_WARNING = 2;
    ALERT_SEVERITY_CRITICAL = 3;
  }
}

// Resource status summary
message ResourceStatus {
  HealthStatus status = 1;
  double usage_percent = 2;
  string message = 3;
  Trend trend = 4;
  optional int64 time_to_exhaustion_seconds = 5;
  
  enum HealthStatus {
    HEALTH_STATUS_UNSPECIFIED = 0;
    HEALTH_STATUS_HEALTHY = 1;
    HEALTH_STATUS_WARNING = 2;
    HEALTH_STATUS_CRITICAL = 3;
    HEALTH_STATUS_UNKNOWN = 4;
  }
  
  enum Trend {
    TREND_UNSPECIFIED = 0;
    TREND_STABLE = 1;
    TREND_INCREASING = 2;
    TREND_DECREASING = 3;
  }
}

// Overall system health
enum SystemHealth {
  SYSTEM_HEALTH_UNSPECIFIED = 0;
  SYSTEM_HEALTH_HEALTHY = 1;
  SYSTEM_HEALTH_DEGRADED = 2;
  SYSTEM_HEALTH_CRITICAL = 3;
  SYSTEM_HEALTH_UNKNOWN = 4;
}

// Historical data point
message MetricsDataPoint {
  google.protobuf.Timestamp timestamp = 1;
  SystemMetrics metrics = 2;
}

// Metadata for historical query
message MetricsHistoryMetadata {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  int32 count = 3;
  int32 resolution_seconds = 4;
  string aggregation_type = 5;
  double completeness_percent = 6;
}
