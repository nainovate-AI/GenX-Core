# genx_platform/monitoring/otel-collector/config/config-tls.yaml
# OpenTelemetry Collector configuration with TLS enabled

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        tls:
          cert_file: /certs/server.crt
          key_file: /certs/server.key
          client_ca_file: /certs/ca.crt
      http:
        endpoint: 0.0.0.0:4318
        tls:
          cert_file: /certs/server.crt
          key_file: /certs/server.key
          client_ca_file: /certs/ca.crt
        cors:
          allowed_origins:
            - "https://*"

  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      process:
        include:
          match_type: regexp
          names: ['genx-*']

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024

  memory_limiter:
    check_interval: 1s
    limit_mib: 1024
    spike_limit_mib: 256

  resource:
    attributes:
      - key: environment
        value: ${ENVIRONMENT}
        action: upsert
      - key: platform
        value: genx
        action: upsert

  attributes:
    actions:
      - key: service.namespace
        value: genx
        action: upsert

  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies:
      [
        {
          name: errors-policy,
          type: status_code,
          status_code: {status_codes: [ERROR]}
        },
        {
          name: slow-traces-policy,
          type: latency,
          latency: {threshold_ms: 1000}
        },
        {
          name: probability-policy,
          type: probabilistic,
          probabilistic: {sampling_percentage: 10}
        }
      ]

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: genx
    const_labels:
      platform: "genx"
    resource_to_telemetry_conversion:
      enabled: true
    # Enable TLS for Prometheus endpoint
    tls:
      cert_file: /certs/server.crt
      key_file: /certs/server.key

  prometheusremotewrite:
    endpoint: "https://prometheus:9090/api/v1/write"
    tls:
      ca_file: /certs/ca.crt
      cert_file: /certs/client.crt
      key_file: /certs/client.key
      insecure_skip_verify: false

  otlp/jaeger:
    endpoint: jaeger:14250  # Use Jaeger's native gRPC port instead of OTLP port
    tls:
      ca_file: /certs/ca.crt
      cert_file: /certs/client.crt
      key_file: /certs/client.key

  loki:
    endpoint: https://loki:3100/loki/api/v1/push
    tls:
      ca_file: /certs/ca.crt
      cert_file: /certs/client.crt
      key_file: /certs/client.key

  debug:
    verbosity: normal
    sampling_initial: 5
    sampling_thereafter: 200

extensions:
  health_check:
    endpoint: 0.0.0.0:13133

  pprof:
    endpoint: 0.0.0.0:1777

  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes, tail_sampling]
      exporters: [otlp/jaeger, debug]

    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [prometheus, prometheusremotewrite]

    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [loki, debug]

  telemetry:
    logs:
      level: info
      initial_fields:
        service: otel-collector
    metrics:
      level: detailed
      address: 0.0.0.0:8888