# monitoring-service/docker/docker-compose.yml
version: '3.8'

services:
  # Monitoring Service API
  monitoring-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: monitoring-api
    hostname: monitoring-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PROMETHEUS_URL=http://prometheus:9090
      - LOKI_URL=http://loki:3100
      - JAEGER_URL=http://jaeger:16686
      - GRAFANA_URL=http://grafana:3000
      - ALERTMANAGER_URL=http://alertmanager:9093
      - OTEL_COLLECTOR_URL=otel-collector:4317
      - DOCKER_NETWORK=monitoring-network
    depends_on:
      - otel-collector
    networks:
      - monitoring-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../configs:/app/configs:ro
    restart: unless-stopped
    labels:
      com.monitoring.service: "monitoring-api"
      com.monitoring.component: "api"

  # OpenTelemetry Collector - Central telemetry hub
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: otel-collector
    hostname: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../configs/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check extension
      - "55679:55679" # zPages extension
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      com.monitoring.service: "otel-collector"
      com.monitoring.component: "telemetry"

  # Prometheus - Metrics storage
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    hostname: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    volumes:
      - ../configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../configs/prometheus/alerts:/etc/prometheus/alerts:ro
      - ../configs/prometheus/recording_rules:/etc/prometheus/recording_rules:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      com.monitoring.service: "prometheus"
      com.monitoring.component: "metrics"

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    hostname: loki
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ../configs/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      com.monitoring.service: "loki"
      com.monitoring.component: "logs"

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    hostname: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger-data:/badger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC for model.proto
      - "14268:14268" # HTTP for jaeger.thrift
      - "14269:14269" # Admin port for health check
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      com.monitoring.service: "jaeger"
      com.monitoring.component: "tracing"

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - ../configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - jaeger
    labels:
      com.monitoring.service: "grafana"
      com.monitoring.component: "visualization"

  # AlertManager - Alert routing
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    hostname: alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ../configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      com.monitoring.service: "alertmanager"
      com.monitoring.component: "alerting"

  # Promtail - Log shipper (optional, for Docker logs)
  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    hostname: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ../configs/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      com.monitoring.service: "promtail"
      com.monitoring.component: "logs"

networks:
  monitoring-network:
    driver: bridge
    name: monitoring-network
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  jaeger-data:
    driver: local
  alertmanager-data:
    driver: local